//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Arcade"",
            ""id"": ""d6c8a3a1-99b0-4103-a3e8-e0f53c1a1c47"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""15e08590-4211-45f9-acff-793a48529eab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""819f42f0-79ac-415d-8886-23fbbef9193c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""db6e13d6-d57f-4245-a378-8231b31b40a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""963b4bc8-720a-401d-aaf6-ee4c7a693077"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c46fae7-4164-4567-9e23-8e915b448d81"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc78a203-569b-4a80-8215-31682fe8bec2"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d77bfeff-e429-4199-a25d-15a9b8ee1edb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47e41385-7b22-46c0-a352-55ece1d59e02"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6a49908-eb41-47be-808a-79f137832d90"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4170444f-569f-43fa-bfe5-262636d138e3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Arcade
        m_Arcade = asset.FindActionMap("Arcade", throwIfNotFound: true);
        m_Arcade_Enter = m_Arcade.FindAction("Enter", throwIfNotFound: true);
        m_Arcade_Left = m_Arcade.FindAction("Left", throwIfNotFound: true);
        m_Arcade_Right = m_Arcade.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Arcade
    private readonly InputActionMap m_Arcade;
    private IArcadeActions m_ArcadeActionsCallbackInterface;
    private readonly InputAction m_Arcade_Enter;
    private readonly InputAction m_Arcade_Left;
    private readonly InputAction m_Arcade_Right;
    public struct ArcadeActions
    {
        private @Controls m_Wrapper;
        public ArcadeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Enter => m_Wrapper.m_Arcade_Enter;
        public InputAction @Left => m_Wrapper.m_Arcade_Left;
        public InputAction @Right => m_Wrapper.m_Arcade_Right;
        public InputActionMap Get() { return m_Wrapper.m_Arcade; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArcadeActions set) { return set.Get(); }
        public void SetCallbacks(IArcadeActions instance)
        {
            if (m_Wrapper.m_ArcadeActionsCallbackInterface != null)
            {
                @Enter.started -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnEnter;
                @Left.started -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_ArcadeActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_ArcadeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public ArcadeActions @Arcade => new ArcadeActions(this);
    public interface IArcadeActions
    {
        void OnEnter(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
